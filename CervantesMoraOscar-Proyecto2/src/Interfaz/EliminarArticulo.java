/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import AccesoADatos.*;
import Entidades.*;
import EstructurasDeDatos.Cola;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * UNED II Cuatrimestre
 * 00825 - Estructuras de datos
 * Proyecto 2: Sistema de gestión de tienda por departamentos
 * Estudiante: Oscar Eduardo Cervantes Mora
 * Fecha: 2025-07-13
 * @author ocervantesmora
 */
public class EliminarArticulo extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(EliminarArticulo.class.getName());
    private DefaultTableModel modeloTablaDepartamentos;
    private DefaultTableModel modeloTablaArticulos;

    /**
     * Creates new form EliminarArticulo
     */
    public EliminarArticulo() {
        initComponents();
        setLocationRelativeTo(null); // Para que la ventana aparezca en el centro de la pantalla, y no en un punto específico
        configurarTablaDepartamentos();
        configurarTablaArticulos();
        
        cargarDatosEnTablaDepartamentos();
              
        tblDepartamentos.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            // Asegura que la lógica solo se ejecute una vez cuando la selección finaliza.
            if (!e.getValueIsAdjusting()) {
                cargarArticulosDelDepartamentoSeleccionado();
            }
        });     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDepartamentos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Eliminar Articulos");

        tblDepartamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDepartamentos);

        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblArticulos);

        btnEliminar.setText("Eliminar siguiente artículo");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEliminar)
                .addGap(92, 92, 92))
            .addGroup(layout.createSequentialGroup()
                .addGap(369, 369, 369)
                .addComponent(btnVolver)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(btnVolver)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        EliminarArticulo.this.dispose();
        VentanaPrincipal ventana = new VentanaPrincipal();
        ventana.setVisible(true);
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int filaDepartamentoSeleccionado = tblDepartamentos.getSelectedRow();
        if (filaDepartamentoSeleccionado == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione primero un departamento de la tabla.", "Error de Selección", JOptionPane.WARNING_MESSAGE);
        }
        int idDepartamento = (int) modeloTablaDepartamentos.getValueAt(filaDepartamentoSeleccionado,0);
        Departamento departamentoSeleccionado = DepartamentoAD.consultarPorId(idDepartamento);
        
        departamentoSeleccionado.removerArticulo();
        
        //Una vez eliminado el articulo, se vuelven a cargar los datos de las tablas para actualizar los datos actuales
        cargarArticulosDelDepartamentoSeleccionado();
        cargarDatosEnTablaDepartamentos();
        
        //Se vuelve a seleccionar el mismo departamento que estaba seleccionado
        for (int i = 0; i < modeloTablaDepartamentos.getRowCount(); i++) {
            int idActual = (int) modeloTablaDepartamentos.getValueAt(i, 0);
            if (idActual == idDepartamento) {
                tblDepartamentos.setRowSelectionInterval(i, i);
                break;
            }
    }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new EliminarArticulo().setVisible(true));
    }
    
    private void configurarTablaDepartamentos(){
        String[] nombresColumnas = {"Id", "Nombre", "Artículos"};
        modeloTablaDepartamentos = new DefaultTableModel(nombresColumnas, 0) {
            //Convierte las celdas de la tabla en No Editables
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        // Asigna el modelo recién creado a la tabla que va a mostar los datos
        tblDepartamentos.setModel(modeloTablaDepartamentos);
        tblDepartamentos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblDepartamentos.getColumnModel().getColumn(0).setPreferredWidth(47);
        tblDepartamentos.getColumnModel().getColumn(1).setPreferredWidth(200);
        tblDepartamentos.getColumnModel().getColumn(2).setPreferredWidth(270);

                
    }
    
    private void cargarDatosEnTablaDepartamentos(){
    modeloTablaDepartamentos.setRowCount(0); // Limpia la tabla antes de cargar nuevos datos

    Departamento[] listaDeDepartamentos = DepartamentoAD.consultarDepartamentos();

        for(int i = 0; i < listaDeDepartamentos.length; i++){
            if (listaDeDepartamentos[i] != null) {
                Object[] fila = new Object[3];
                fila[0] = listaDeDepartamentos[i].getId();
                fila[1] = listaDeDepartamentos[i].getNombre();
                fila[2] = listaDeDepartamentos[i].getArticulos();

                modeloTablaDepartamentos.addRow(fila);
            }
        }
    }
    
    private void configurarTablaArticulos(){
        String[] nombresColumnas = {"Id", "Nombre", "Categorías"};
        modeloTablaArticulos = new DefaultTableModel(nombresColumnas, 0) {
            //Convierte las celdas de la tabla en No Editables
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        // Asigna el modelo recién creado a la tabla que va a mostar los datos
        tblArticulos.setModel(modeloTablaArticulos);
        tblArticulos.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblArticulos.getColumnModel().getColumn(0).setPreferredWidth(47);
        tblArticulos.getColumnModel().getColumn(1).setPreferredWidth(130);
        tblArticulos.getColumnModel().getColumn(2).setPreferredWidth(130);
    }
    
    private void cargarArticulosDelDepartamentoSeleccionado(){
        modeloTablaArticulos.setRowCount(0); // Limpia la tabla antes de cargar nuevos datos

        int filaSeleccionada = tblDepartamentos.getSelectedRow();
        if(filaSeleccionada != -1){
            int idDepartamento = (int) modeloTablaDepartamentos.getValueAt(filaSeleccionada, 0);
            Departamento departamentoSeleccionado = DepartamentoAD.consultarPorId(idDepartamento);
            Object[] articulosDelDepartamento = departamentoSeleccionado.getArticulos().toArray();
            for(int i = 0 ; i < articulosDelDepartamento.length ; i++){
                if (articulosDelDepartamento[i] != null) {
                    Articulo articulo = (Articulo) articulosDelDepartamento[i];
                    Object[] fila = new Object[3];
                    fila[0] = articulo.getId();
                    fila[1] = articulo.getNombre();
                    fila[2] = articulo.getCategoria();

                    modeloTablaArticulos.addRow(fila);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblArticulos;
    private javax.swing.JTable tblDepartamentos;
    // End of variables declaration//GEN-END:variables
}
